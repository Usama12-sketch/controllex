generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  title     String     @db.VarChar(255)
  content   String?
  img       String?
  published Boolean    @default(false)
  userId    String?
  hearts    Hearts[]
  Archives  Archives[]
  Comments  Comments[]
  user      User?      @relation(fields: [userId], references: [id])
}

model Admins {
  id        String    @id @default(cuid())
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  name      String?
  img       String?
  published Boolean   @default(false)
  userId    String?
  emails    String?
  user      User?     @relation(fields: [userId], references: [id])
}

model Blocs {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  img       String?
  published Boolean  @default(false)
  userId    String?
  emails    String?
  user      User?    @relation(fields: [userId], references: [id])
}

model Comments {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  userId    String?
  comment   String?
  postId    String?
  Post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])
}
model Hearts {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String?
  heart Boolean  @default(false)
  postId    String?
  Post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  description   String?
  accounts      Account[]
  Admins        Admins[]
  Archives      Archives[]
  Blocs         Blocs[]
  comments      Comments[]
  hearts         Hearts[]

  Post          Post[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Archives {
  id            String     @id 
  published Boolean  @default(false)
  postId    String?
  Post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String?
  User      User?   @relation(fields: [userId], references: [id])
}
